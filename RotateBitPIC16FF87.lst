;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 14/8/2024 22:46:23
;----------------------------------------------

;Opcode 	ASM
0x2803      	GOTO       3
_main:
;RotateBitPIC16FF87.c,4 :: 		int main(){
;RotateBitPIC16FF87.c,5 :: 		TRISD = 0x00; //Declarate Output PORTD
0x1683      	BSF        STATUS, 5
0x1303      	BCF        STATUS, 6
0x0188      	CLRF       TRISD
;RotateBitPIC16FF87.c,6 :: 		TRISA0_bit = 0X01; //Declarate bit 0 from PORTA
0x1405      	BSF        TRISA0_bit, BitPos(TRISA0_bit+0)
;RotateBitPIC16FF87.c,7 :: 		PORTD = 0x01; // Set PORTD whit 0x01 value
0x3001      	MOVLW      1
0x1283      	BCF        STATUS, 5
0x0088      	MOVWF      PORTD
;RotateBitPIC16FF87.c,8 :: 		ANSEL = 0x00; //Analog Select Register for digital input
0x1683      	BSF        STATUS, 5
0x1703      	BSF        STATUS, 6
0x0188      	CLRF       ANSEL
;RotateBitPIC16FF87.c,11 :: 		while(1){
L_main0:
;RotateBitPIC16FF87.c,17 :: 		if(RA0_bit == 0){
0x1283      	BCF        STATUS, 5
0x1303      	BCF        STATUS, 6
0x1805      	BTFSC      RA0_bit, BitPos(RA0_bit+0)
0x2896      	GOTO       L_main2
;RotateBitPIC16FF87.c,20 :: 		for(i = 0; i < 8; i++){
0x01A2      	CLRF       _i
L_main3:
0x3008      	MOVLW      8
0x0222      	SUBWF      _i, 0
0x1803      	BTFSC      STATUS, 0
0x2855      	GOTO       L_main4
;RotateBitPIC16FF87.c,21 :: 		if(RA0_bit == 0){
0x1805      	BTFSC      RA0_bit, BitPos(RA0_bit+0)
0x2838      	GOTO       L_main6
;RotateBitPIC16FF87.c,22 :: 		temp = (PORTD & 0x01) << 7; // Extraer RD0
0x3001      	MOVLW      1
0x0508      	ANDWF      PORTD, 0
0x00F1      	MOVWF      R1
0x3007      	MOVLW      7
0x00F0      	MOVWF      R0
0x0871      	MOVF       R1, 0
0x00F2      	MOVWF      R2
0x0870      	MOVF       R0, 0
L__main24:
0x1903      	BTFSC      STATUS, 2
0x2826      	GOTO       L__main25
0x0DF2      	RLF        R2, 1
0x1072      	BCF        R2, 0
0x3EFF      	ADDLW      255
0x2820      	GOTO       L__main24
L__main25:
0x0872      	MOVF       R2, 0
0x00A3      	MOVWF      _temp
;RotateBitPIC16FF87.c,23 :: 		PORTD = (PORTD >> 1) | temp; // Desplazar a la derecha e insertar el bit RD0 en RD7
0x0808      	MOVF       PORTD, 0
0x00F0      	MOVWF      R0
0x0CF0      	RRF        R0, 1
0x13F0      	BCF        R0, 7
0x0872      	MOVF       R2, 0
0x0470      	IORWF      R0, 0
0x0088      	MOVWF      PORTD
;RotateBitPIC16FF87.c,24 :: 		Delay_ms(90); // Retardo de 300 ms para observar la rotación}else{
0x30EA      	MOVLW      234
0x00FC      	MOVWF      R12
0x30C3      	MOVLW      195
0x00FD      	MOVWF      R13
L_main7:
0x0BFD      	DECFSZ     R13, 1
0x2833      	GOTO       L_main7
0x0BFC      	DECFSZ     R12, 1
0x2833      	GOTO       L_main7
;RotateBitPIC16FF87.c,25 :: 		}else{
0x2853      	GOTO       L_main8
L_main6:
;RotateBitPIC16FF87.c,26 :: 		PORTD = 0xFF;
0x30FF      	MOVLW      255
0x0088      	MOVWF      PORTD
;RotateBitPIC16FF87.c,27 :: 		Delay_ms(150);
0x3002      	MOVLW      2
0x00FB      	MOVWF      R11
0x3086      	MOVLW      134
0x00FC      	MOVWF      R12
0x3099      	MOVLW      153
0x00FD      	MOVWF      R13
L_main9:
0x0BFD      	DECFSZ     R13, 1
0x2840      	GOTO       L_main9
0x0BFC      	DECFSZ     R12, 1
0x2840      	GOTO       L_main9
0x0BFB      	DECFSZ     R11, 1
0x2840      	GOTO       L_main9
;RotateBitPIC16FF87.c,28 :: 		PORTD = 0x00;
0x0188      	CLRF       PORTD
;RotateBitPIC16FF87.c,29 :: 		Delay_ms(150);
0x3002      	MOVLW      2
0x00FB      	MOVWF      R11
0x3086      	MOVLW      134
0x00FC      	MOVWF      R12
0x3099      	MOVLW      153
0x00FD      	MOVWF      R13
L_main10:
0x0BFD      	DECFSZ     R13, 1
0x284D      	GOTO       L_main10
0x0BFC      	DECFSZ     R12, 1
0x284D      	GOTO       L_main10
0x0BFB      	DECFSZ     R11, 1
0x284D      	GOTO       L_main10
;RotateBitPIC16FF87.c,30 :: 		}
L_main8:
;RotateBitPIC16FF87.c,20 :: 		for(i = 0; i < 8; i++){
0x0AA2      	INCF       _i, 1
;RotateBitPIC16FF87.c,31 :: 		}
0x2812      	GOTO       L_main3
L_main4:
;RotateBitPIC16FF87.c,32 :: 		for( i = 0; i < 8; i++){
0x01A2      	CLRF       _i
L_main11:
0x3008      	MOVLW      8
0x0222      	SUBWF      _i, 0
0x1803      	BTFSC      STATUS, 0
0x2889      	GOTO       L_main12
;RotateBitPIC16FF87.c,33 :: 		if(RA0_bit == 0){
0x1805      	BTFSC      RA0_bit, BitPos(RA0_bit+0)
0x286C      	GOTO       L_main14
;RotateBitPIC16FF87.c,34 :: 		temp = (PORTD & 0x80) >> 8; // Extraer RD7
0x01A3      	CLRF       _temp
;RotateBitPIC16FF87.c,35 :: 		PORTD = (PORTD << 1) | temp; // Desplazar a la izquierda e insertar el bit RD7 en RD0
0x0808      	MOVF       PORTD, 0
0x00F0      	MOVWF      R0
0x0DF0      	RLF        R0, 1
0x1070      	BCF        R0, 0
0x0870      	MOVF       R0, 0
0x0088      	MOVWF      PORTD
;RotateBitPIC16FF87.c,36 :: 		Delay_ms(90); // Retardo de 300 ms para observar la rotación
0x30EA      	MOVLW      234
0x00FC      	MOVWF      R12
0x30C3      	MOVLW      195
0x00FD      	MOVWF      R13
L_main15:
0x0BFD      	DECFSZ     R13, 1
0x2867      	GOTO       L_main15
0x0BFC      	DECFSZ     R12, 1
0x2867      	GOTO       L_main15
;RotateBitPIC16FF87.c,37 :: 		}else{
0x2887      	GOTO       L_main16
L_main14:
;RotateBitPIC16FF87.c,38 :: 		PORTD = 0xFF;
0x30FF      	MOVLW      255
0x0088      	MOVWF      PORTD
;RotateBitPIC16FF87.c,39 :: 		Delay_ms(150);
0x3002      	MOVLW      2
0x00FB      	MOVWF      R11
0x3086      	MOVLW      134
0x00FC      	MOVWF      R12
0x3099      	MOVLW      153
0x00FD      	MOVWF      R13
L_main17:
0x0BFD      	DECFSZ     R13, 1
0x2874      	GOTO       L_main17
0x0BFC      	DECFSZ     R12, 1
0x2874      	GOTO       L_main17
0x0BFB      	DECFSZ     R11, 1
0x2874      	GOTO       L_main17
;RotateBitPIC16FF87.c,40 :: 		PORTD = 0x00;
0x0188      	CLRF       PORTD
;RotateBitPIC16FF87.c,41 :: 		Delay_ms(150);
0x3002      	MOVLW      2
0x00FB      	MOVWF      R11
0x3086      	MOVLW      134
0x00FC      	MOVWF      R12
0x3099      	MOVLW      153
0x00FD      	MOVWF      R13
L_main18:
0x0BFD      	DECFSZ     R13, 1
0x2881      	GOTO       L_main18
0x0BFC      	DECFSZ     R12, 1
0x2881      	GOTO       L_main18
0x0BFB      	DECFSZ     R11, 1
0x2881      	GOTO       L_main18
;RotateBitPIC16FF87.c,42 :: 		}
L_main16:
;RotateBitPIC16FF87.c,32 :: 		for( i = 0; i < 8; i++){
0x0AA2      	INCF       _i, 1
;RotateBitPIC16FF87.c,43 :: 		}
0x2856      	GOTO       L_main11
L_main12:
;RotateBitPIC16FF87.c,44 :: 		Delay_ms(150);
0x3002      	MOVLW      2
0x00FB      	MOVWF      R11
0x3086      	MOVLW      134
0x00FC      	MOVWF      R12
0x3099      	MOVLW      153
0x00FD      	MOVWF      R13
L_main19:
0x0BFD      	DECFSZ     R13, 1
0x288F      	GOTO       L_main19
0x0BFC      	DECFSZ     R12, 1
0x288F      	GOTO       L_main19
0x0BFB      	DECFSZ     R11, 1
0x288F      	GOTO       L_main19
;RotateBitPIC16FF87.c,45 :: 		}else{
0x28B1      	GOTO       L_main20
L_main2:
;RotateBitPIC16FF87.c,46 :: 		PORTD = 0xFF;
0x30FF      	MOVLW      255
0x0088      	MOVWF      PORTD
;RotateBitPIC16FF87.c,47 :: 		Delay_ms(150);
0x3002      	MOVLW      2
0x00FB      	MOVWF      R11
0x3086      	MOVLW      134
0x00FC      	MOVWF      R12
0x3099      	MOVLW      153
0x00FD      	MOVWF      R13
L_main21:
0x0BFD      	DECFSZ     R13, 1
0x289E      	GOTO       L_main21
0x0BFC      	DECFSZ     R12, 1
0x289E      	GOTO       L_main21
0x0BFB      	DECFSZ     R11, 1
0x289E      	GOTO       L_main21
;RotateBitPIC16FF87.c,48 :: 		PORTD = 0x00;
0x0188      	CLRF       PORTD
;RotateBitPIC16FF87.c,49 :: 		Delay_ms(150);
0x3002      	MOVLW      2
0x00FB      	MOVWF      R11
0x3086      	MOVLW      134
0x00FC      	MOVWF      R12
0x3099      	MOVLW      153
0x00FD      	MOVWF      R13
L_main22:
0x0BFD      	DECFSZ     R13, 1
0x28AB      	GOTO       L_main22
0x0BFC      	DECFSZ     R12, 1
0x28AB      	GOTO       L_main22
0x0BFB      	DECFSZ     R11, 1
0x28AB      	GOTO       L_main22
;RotateBitPIC16FF87.c,50 :: 		}
L_main20:
;RotateBitPIC16FF87.c,51 :: 		}
0x280D      	GOTO       L_main0
;RotateBitPIC16FF87.c,52 :: 		}
L_end_main:
0x28B2      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003     [176]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [0]    RA0_bit
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x0020       [2]    ___DoICPAddr
0x0022       [1]    _i
0x0023       [1]    _temp
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0085       [0]    TRISA0_bit
0x0088       [1]    TRISD
0x0188       [1]    ANSEL
